/// <reference types="react" />
import { Tooltip, TooltipProps } from './Tooltip';
export { Tooltip };
export type { TooltipProps };
declare const _default: import("react").FunctionComponent<Pick<{
    withPointer?: boolean;
    popover?: import("react").ReactElement<{}, string | ((props: any) => import("react").ReactElement<any, string | any | (new (props: any) => import("react").Component<any, any, any>)>) | (new (props: any) => import("react").Component<any, any, any>)>;
    toggleOnPress?: boolean;
    toggleAction?: string;
    height?: string | number;
    width?: string | number;
    containerStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
    pointerColor?: import("react-native").ColorValue;
    onClose?(): void;
    onOpen?(): void;
    overlayColor?: import("react-native").ColorValue;
    withOverlay?: boolean;
    backgroundColor?: import("react-native").ColorValue;
    highlightColor?: import("react-native").ColorValue;
    skipAndroidStatusBar?: boolean;
    ModalComponent?: typeof import("react").Component;
    closeOnlyOnBackdropPress?: boolean;
} & {
    withOverlay: boolean;
    overlayColor: string;
    highlightColor: string;
    withPointer: boolean;
    toggleOnPress: boolean;
    toggleAction: string;
    height: number;
    width: number;
    containerStyle: {};
    backgroundColor: string;
    onClose: () => void;
    onOpen: () => void;
    skipAndroidStatusBar: boolean;
    ModalComponent: typeof import("react-native").Modal;
    closeOnlyOnBackdropPress: boolean;
} & Partial<import("../config").ThemeProps<TooltipProps>>, "width" | "height" | "containerStyle" | "backgroundColor" | "overlayColor" | "ModalComponent" | "onOpen" | "onClose" | "toggleOnPress" | "toggleAction" | "withPointer" | "popover" | "pointerColor" | "withOverlay" | "highlightColor" | "skipAndroidStatusBar" | "closeOnlyOnBackdropPress">> | import("react").ForwardRefExoticComponent<{
    withPointer?: boolean;
    popover?: import("react").ReactElement<{}, string | ((props: any) => import("react").ReactElement<any, string | any | (new (props: any) => import("react").Component<any, any, any>)>) | (new (props: any) => import("react").Component<any, any, any>)>;
    toggleOnPress?: boolean;
    toggleAction?: string;
    height?: string | number;
    width?: string | number;
    containerStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
    pointerColor?: import("react-native").ColorValue;
    onClose?(): void;
    onOpen?(): void;
    overlayColor?: import("react-native").ColorValue;
    withOverlay?: boolean;
    backgroundColor?: import("react-native").ColorValue;
    highlightColor?: import("react-native").ColorValue;
    skipAndroidStatusBar?: boolean;
    ModalComponent?: typeof import("react").Component;
    closeOnlyOnBackdropPress?: boolean;
} & {
    withOverlay: boolean;
    overlayColor: string;
    highlightColor: string;
    withPointer: boolean;
    toggleOnPress: boolean;
    toggleAction: string;
    height: number;
    width: number;
    containerStyle: {};
    backgroundColor: string;
    onClose: () => void;
    onOpen: () => void;
    skipAndroidStatusBar: boolean;
    ModalComponent: typeof import("react-native").Modal;
    closeOnlyOnBackdropPress: boolean;
} & Partial<import("../config").ThemeProps<TooltipProps>>>;
export default _default;
