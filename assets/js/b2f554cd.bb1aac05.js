"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[301],{30010:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2021/08/23/google-summer-of-code-arpitBhalla","metadata":{"permalink":"/blog/2021/08/23/google-summer-of-code-arpitBhalla","source":"@site/blog/2021-08-23-google-summer-of-code-arpitBhalla.md","title":"Google Summer of Code\'21 Arpit Bhalla","description":"\ud83d\udcd1 Project Details","date":"2021-08-23T00:00:00.000Z","formattedDate":"August 23, 2021","tags":[],"readingTime":3.6,"truncated":false,"authors":[{"name":"Arpit Bhalla","url":"https://github.com/arpitBhalla"}],"frontMatter":{"title":"Google Summer of Code\'21 Arpit Bhalla","author":"Arpit Bhalla","authorURL":"https://github.com/arpitBhalla"},"nextItem":{"title":"Google Summer of Code\'21 Khushal Agarwal","permalink":"/blog/2021/08/18/google-summer-of-code-khushal-agarwal"}},"content":"<div align=\'center\'>\\n<img src=\'https://raw.githubusercontent.com/arpitBhalla/google-summer-of-code/master/assets//header.png\' />\\n</div>\\n\\n## \ud83d\udcd1 Project Details\\n\\n- Organization: [React Native Elements](https://github.com/react-native-elements)\\n\\n- Project: [Migrating Hooks, Tests & APIs](https://summerofcode.withgoogle.com/projects/#5514659471294464)\\n\\n- Mentors: [Jeremy Hamilton](https://github.com/flyingcircle), [Pranshu Chittora](https://github.com/pranshuchittora), [Dhruvdutt](https://github.com/dhruvdutt)\\n\\n- Student: [Arpit Bhalla](https://github.com/arpitBhalla)\\n\\n## \ud83d\ude80 Overview\\n\\nThe **Google Summer of Code 2021** has been a fantastic and cheerful learning experience for me over the past few months. I have learned a lot from the community, especially how to organize commits and write readable code. **React Native Elements** is an amazing community to work with, as mentors are really helpful and experienced. I had started contributing to React Native Elements from March 2021 and till now, I have 40+ commits (10,803 additions and 13,826 deletions) merged. Over the past few months, I had great exposure writing maintainable code, communicating with the mentors, etc. I had completed some of my work in the coding period started as some issues mentioned in my proposal had a high priority for the release.\\n\\n<div align=\'center\'>\\n<img src=\'https://raw.githubusercontent.com/arpitBhalla/google-summer-of-code/master/assets//contri.png\' width=\'900\' />\\n</div>\\n\\n## \ud83d\ude98 Work Abstract\\n\\n### Refactor components to use `Pressable` API [(#3170)](https://github.com/react-native-elements/react-native-elements/pull/3170)\\n\\n> `Pressable` is preferred to `Touchable` components according to React Native official docs. `Pressable` component offers a more extensive and future-proof way of handling the touch-based inputs.\\n\\n- `Touchable` Component:\\n\\n  - It includes the styles and effects that do not meet the platform interactions.\\n  - It does not support high-quality interaction experience on different platforms.\\n\\n- `Pressable` Component:\\n\\n  - It detects various types of interactions.\\n  - Its API provides direct access to the current state of interaction.\\n  - Its capabilities could be extended to include hover, blur, focus, and more.\\n    `Pressable` contains a lot of new props and cool features such as:\\n    delayLongPress: Duration in milliseconds from onPressIn by the time onLongPress is called.\\n\\nReference : [Pressable vs. Touchable in React Native](https://medium.com/@mahyarmohammadi/react-native-pressable-vs-touchable-5fec6b332f15)\\n\\n### Migrate Tests to React Native Testing Library [(#3170)](https://github.com/react-native-elements/react-native-elements/pull/3170)\\n\\n> Rather than tests focusing on the implementation (Enzyme), tests are more focused on user behavior (react-native-testing-library).\\n\\nEnzyme allows us to access the internal workings of your components. You can read and set the state, and we can mock children to make tests run faster. On the other hand, RN testing-library doesn\'t give us any access to the implementation details. It renders the components and provides utility methods to interact with them. The idea is that you should communicate with our application in the same way a user would. So rather than set the state of a component we reproduce the actions a user would do to reach that state.\\n\\n### Class to Functions Migration\\n\\nSome components like **Image, ToolTip** which further include SearchBar android & SearchBar iOS were Class Components and the code was messy, These are migrated to Functional Components and added hooks like, useState, useEffect, useCallBack, which would increase performance.\\n\\n- **Using classes** - We need to describe lifecycle methods, state of the component, component\u2019s methods that will change our state or work with the store. Also, we need to bind all the methods for the component instance. The component becomes large, and it becomes more difficult to read each time.\\n- **Using hooks** - We can get the state of the component so that it can be easily tested and reused. Now we can facilitate the exchange of links between components or our entire application - using hooks. Hooks allow you to encapsulate logic without affecting the hierarchy of components.\\n\\n## \ud83c\udf8a My Contributions\\n\\nYou can find all my contributions [here](https://github.com/react-native-elements/react-native-elements/pulls?q=is%3Apr+author%3AarpitBhalla+sort%3Aupdated-desc+is%3Amerged)\\n\\n### New components\\n\\n- [LinearProgress (#2867)](https://github.com/react-native-elements/react-native-elements/pull/2867)\\n- [FAB (#2885)](https://github.com/react-native-elements/react-native-elements/pull/2885)\\n- [Speed dial (#2896)](https://github.com/react-native-elements/react-native-elements/pull/2896)\\n- [Tab & TabItem (#2919)](https://github.com/react-native-elements/react-native-elements/pull/2919)\\n- [CircularSlider (#1)](https://github.com/react-native-elements/react-native-elements-universe/pull/1)\\n- [TabView & TabView.Item (#2983)](https://github.com/react-native-elements/react-native-elements/pull/2983)\\n- [ListItem Accordion (#2953)](https://github.com/react-native-elements/react-native-elements/pull/2953)\\n- [ListItem Swipeable (#2982)](https://github.com/react-native-elements/react-native-elements/pull/2982)\\n\\n### Core Improvements\\n\\n- [Migrate build to Github Actions (#3101)](https://github.com/react-native-elements/react-native-elements/pull/3101)\\n- [Strict TypeScript (#2930)](https://github.com/react-native-elements/react-native-elements/pull/2930)\\n- [Removed ts-ignore and transformed to Functional Component (#2834)](https://github.com/react-native-elements/react-native-elements/pull/2834)\\n\\n### Documentation redesigned [(#3108)](https://github.com/react-native-elements/react-native-elements/pull/3108)\\n\\n<div align=\'center\'>\\n<img src=\'https://raw.githubusercontent.com/arpitBhalla/google-summer-of-code/master/assets//website.png\' />\\n</div>\\n\\n### Snack player\\n\\nIt helps user to test the component from documentation\\n\\n<div align=\'center\'>\\n<img src=\'https://raw.githubusercontent.com/arpitBhalla/google-summer-of-code/master/assets//snack.png\' />\\n</div>\\n\\n### VS Code extension\\n\\nAuto imports components and auto complete syntax with component preview for React Native Elements.\\n\\n<div align=\'center\'>\\n<img src=\'https://raw.githubusercontent.com/arpitBhalla/google-summer-of-code/master/assets//vscode.png\' />\\n</div>\\n\\n## \ud83d\udea7 What\'s next?\\n\\n### New `Stack` Component\\n\\nStack is concerned with one-dimensional layouts. `This is not yet in the priority` but it would help developers.\\n\\nExample\\n\\n```js\\n<Stack spacing={2}>\\n  <Item>Item 1</Item>\\n  <Item>Item 2</Item>\\n  <Item>Item 3</Item>\\n</Stack>\\n```"},{"id":"/2021/08/18/google-summer-of-code-khushal-agarwal","metadata":{"permalink":"/blog/2021/08/18/google-summer-of-code-khushal-agarwal","source":"@site/blog/2021-08-18-google-summer-of-code-khushal-agarwal.md","title":"Google Summer of Code\'21 Khushal Agarwal","description":"Automatically generate documentation out of React/React Native Component","date":"2021-08-18T00:00:00.000Z","formattedDate":"August 18, 2021","tags":[],"readingTime":3.77,"truncated":false,"authors":[{"name":"Khushal Agarwal","url":"https://github.com/khushal87"}],"frontMatter":{"title":"Google Summer of Code\'21 Khushal Agarwal","author":"Khushal Agarwal","authorURL":"https://github.com/khushal87"},"prevItem":{"title":"Google Summer of Code\'21 Arpit Bhalla","permalink":"/blog/2021/08/23/google-summer-of-code-arpitBhalla"},"nextItem":{"title":"Auto-generation of Documentation Website","permalink":"/blog/2021/08/12/auto-generation-of-docs"}},"content":"<div  align=\\"center\\">\\n\\t<a  href=\\"https://summerofcode.withgoogle.com/projects/#5690075263795200\\"><img  src=\\"https://pbs.twimg.com/media/EwIc141UUAUnA7x.png\\"  width=\\"650\\"  alt=\\"google-summer-of-code\\"/></a>\\n\\t<br />\\n\\t<b>\\n\\t\\t<p>\\n\\t\\tAutomatically generate documentation out of React/React Native Component\\n\\t\\t</p>\\n\\t</b>\\n</div>\\n\\nThis summer, I was pleased to get selected for Google Summer of Code\'21 under the organization [React Native Elements](https://github.com/react-native-elements). Working under the organization, my project was to **generate documentation automatically out of the UI components and present it in the Docusaurus website**.\\n\\n<div  align=\\"center\\">\\n\\n![enter image description here](https://media.giphy.com/media/ZcKASxMYMKA9SQnhIl/giphy.gif)\\n\\n</div>\\n\\nThe purpose of creating this repository is to maintain a report summary of my GSoC work and this may also serve as a guide for future GSoC aspirants and a reference to the developers and contributors to the project.\\n\\n## \ud83d\udcd9 Abstract\\n\\n[React Native Elements](https://www.npmjs.com/package/react-native-elements) is a cross-platform UI toolkit built on/for React Native. With a weekly download by 90k+ users and backed by a huge community, it provides UI components that can be used in your native application for the platform of Android/iOS/Web.\\n\\nThe documentation of the project was maintained manually previously i.e., suppose I want to change/add/remove a prop or a new component to the project the markdown file had to be changed manually. The process is tiring and new contributors may often forget to do so. So, during the summers I took the change this process and make a workflow such that the generation is automatic. This should be **fast and maintainable**.\\n\\n## \ud83d\udcdd Deliverables\\n\\nThe deliverables of the project are as follows:\\n\\n- [x] Efficient Development Setup\\n- [x] Re-structure and Refactor code to have a common pattern.\\n- [x] Maintain the Usage/Examples of the component as they are needed to be updated manually.\\n- [x] Refactor and rename the directory structure such that Autogen is successful.\\n  - Convert the code-base to have all the functional components.\\n- [x] Commenting on all the components and props.\\n  - Adding descriptions.\\n  - Adding prop descriptions.\\n  - Ensuring a common pattern is followed.\\n- [x] Writing **scripts to extract data out**(in JS/TS) of it in the form of JSON.\\n- [x] Converting the JSON data to Markdown.\\n- [ ] Automating the process such that the workflow works automatically whenever there is a change in the prop/definition or component code.\\n\\nAll of the listed deliverables were completed within the GSoC period. \ud83c\udf89\\n\\n## \ud83d\udce6 Working product\\n\\nThe work can be found here - [Official Website of React native elements](https://reactnativeelements.com/docs/next/). Please refer to the component docs.\\n\\n**I have also written a blog on how it works attached [here](https://deploy-preview-3145--react-native-elements.netlify.app/blog/2021/08/12/auto-generation-of-docs).**\\n\\n## \ud83d\ude80 Contributions\\n\\n### Pull requests\\n\\n| PR Link                                                                                                                                                              | Description                                              | Status                |\\n| -------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------- | --------------------- |\\n| [#3071](https://github.com/react-native-elements/react-native-elements/pull/3071)                                                                                    | [Refactor] Documentation directory structure             | Merged \u2705             |\\n| [#3081](https://github.com/react-native-elements/react-native-elements/pull/3081)                                                                                    | [Refactor] Directory structure of components             | Merged \u2705             |\\n| [#3112](https://github.com/react-native-elements/react-native-elements/pull/3112)                                                                                    | [Add] props description, descriptions to the component.  | Merged \u2705             |\\n| [#3126](https://github.com/react-native-elements/react-native-elements/pull/3126)                                                                                    | [Docs] Added demos and snack for the documentation       | Merged \u2705             |\\n| [#3136](https://github.com/react-native-elements/react-native-elements/pull/3136)                                                                                    | [Add] Docgen auto generation of docs scripts             | Merged \u2705             |\\n| [#3142](https://github.com/react-native-elements/react-native-elements/pull/3142)                                                                                    | [Docs] Added generate-markdown scripts                   | Merged \u2705             |\\n| [#3143](https://github.com/react-native-elements/react-native-elements/pull/3143), [#3144](https://github.com/react-native-elements/react-native-elements/pull/3144) | [Fix] Issues related to auto-generation of documentation | Merged \u2705             |\\n| [#3145](https://github.com/react-native-elements/react-native-elements/pull/3145)                                                                                    | [Fix, Improve] Doc-gen issues and automation             | Open(to be merged) \ud83d\udd52 |\\n\\n### Issues\\n\\n| Issue link                                                                          | Description                                                        |\\n| ----------------------------------------------------------------------------------- | ------------------------------------------------------------------ |\\n| [#3171](https://github.com/react-native-elements/react-native-elements/issues/3171) | [Docs] Auto-generation of documentation for class based components |\\n\\nApart from these contributions, I have contributed to other React native elements projects. They can be summarized as:\\n\\n- [Pull requests](https://github.com/pulls?q=is:pr+org:react-native-elements+author:khushal87)\\n- [Issues](https://github.com/issues?q=is:issue+org:react-native-elements+author:khushal87)\\n\\n| Project                           | Reference                                                                                                                          |\\n| --------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------- |\\n| React Native Elements - main repo | [Pull requests](https://github.com/react-native-elements/react-native-elements/pulls?q=is%3Apr+author%3Akhushal87+)                |\\n| React Native Elements App         | [Pull requests](https://github.com/react-native-elements/react-native-elements-app/pulls?q=is%3Apr+author%3Akhushal87+is%3Aclosed) |\\n| Playground                        | [Pull requests](https://github.com/react-native-elements/playground/pulls?q=is%3Apr+author%3Akhushal87+is%3Aclosed)                |\\n\\n## \ud83d\udc68 Mentors\\n\\nI would like to thank my mentors for helping me reach this milestone. \ud83d\ude04\ud83d\ude04\\n\\nI have not only learned about the Open Source culture and how to write good code but also, learned how the industry works and the import\\n\\n- **Dhruvdutt Jadhav** - [GitHub](https://github.com/dhruvdutt). [LinkedIn](https://www.linkedin.com/in/dhruvdutt-jadhav/)\\n- **Pranshu Chittora** - [GitHub](https://github.com/pranshuchittora). [LinkedIn](https://www.linkedin.com/in/pranshuchittora/)\\n- **Jeremy Hamilton** - [GitHub](https://github.com/flyingcircle). [LinkedIn](https://www.linkedin.com/in/jeremy-hamilton-19b6217b/)\\n\\nI would also like to thank [Arpit Bhalla](https://github.com/arpitBhalla) for being an amazing partner in this amazing journey.\\n\\n## \ud83d\udd17 Links\\n\\n<div  align=\\"center\\">\\n\\n| **Student**      |                                                    Khushal Agarwal                                                     |\\n| :--------------- | :--------------------------------------------------------------------------------------------------------------------: |\\n| **Organization** |                           [React Native Elements](https://github.com/react-native-elements/)                           |\\n| **Project**      | [Automatically generate documentation from components](https://summerofcode.withgoogle.com/projects/#5690075263795200) |\\n| **GitHub**       |                                       [khushal87](https://github.com/khushal87)                                        |\\n| **LinkedIn**     |                                [Khushal Agarwal](https://www.linkedin.com/in/khushal87)                                |\\n| **Twitter**      |                                     [khushal87](https://www.twitter.com/khushal87)                                     |\\n| **Email**        |                    <a  href=\\"mailto:khushal.agarwal987@gmail.com\\">khushal.agarwal987@gmail.com</a>                     |\\n\\n</div>"},{"id":"/2021/08/12/auto-generation-of-docs","metadata":{"permalink":"/blog/2021/08/12/auto-generation-of-docs","source":"@site/blog/2021-08-12-auto-generation-of-docs.md","title":"Auto-generation of Documentation Website","description":"This is a guide to generate documentation of the UI components automatically.","date":"2021-08-12T00:00:00.000Z","formattedDate":"August 12, 2021","tags":[],"readingTime":3.925,"truncated":false,"authors":[{"name":"Khushal Agarwal","url":"https://github.com/khushal87"}],"frontMatter":{"title":"Auto-generation of Documentation Website","author":"Khushal Agarwal","authorURL":"https://github.com/khushal87"},"prevItem":{"title":"Google Summer of Code\'21 Khushal Agarwal","permalink":"/blog/2021/08/18/google-summer-of-code-khushal-agarwal"},"nextItem":{"title":"Version 2.3 Upgrade Guide","permalink":"/blog/2020/08/10/2.3-upgrade-guide"}},"content":"> This is a guide to generate documentation of the UI components automatically.\\n\\nInitially when this workflow was not present, the entire documentation of the website was done by editing the docs manually by going to the `docs` directory under `website` and editing the markdown manually. Now, we have come with a flow where developers and contributors can focus more on logic than on writing markdown.\\n\\n## Workflow\\n\\nTo do this we have created scripts which would parse the components and generate documentation out of it.\\n\\nThis is a 2 step process:\\n\\n1. We take use of `react-docgen-typescript` which takes the input of the files for which we want to generate the documentation automatically. This gives in JSON as output. This JSON consists of all the details of the props including `type`, `name`, `description` and `defaultValue` and well as `description` of the components.\\n\\n2. As we use Docusaurus for our documentation website, the pages of the documentation should be in the format of Markdown. Therefore, there should be process where we can change the JSON data, which we get from `react-docgen-typescript` to a suitable Markdown format. For this we use, `json2md` which takes in the data and convert it to suitable markdown string. This is stored in the directory and is shown on the website.\\n\\n#### How does this work\\n\\nWell to make the script to work automatically what we have done is as follows:\\n\\n1. When you push your changes to your branch. A script `updateDocumentation.js` runs.\\n\\n2. This invokes the `yarn docs-build` command which calls the scripts of auto-generation of docs and this also _lints_ the markdown files generated at the same time.\\n\\n3. Now, if there is any changes in the markdown files. A commit with message `Update Documentation` is done and pushed after your commit is done to the branch.\\n\\n**Note:** By passing pre-push hook will result in failure of documentation update and may lead maintainers to close your PR.\\n\\n## Updating existing components\\n\\nThis is simple. Adding, removing, updating the props is also simple now. You just need to update the comments/description of the component and deal with the logic of your React Components(if required). Our workflow will automatically detect the markdown changes if any and push the changes using `pre-push` hooks while you push your code to your branch.\\n\\n## Adding new components\\n\\nTrust me this is easy. We have designed the workflow such that, you only need to work on your JavaScript/TypeScript logic, without bothering about updating the markdown files. The input to the docgenParser is automatic and doesn\'t require any aditional cofiguration.\\n\\n**Make sure to add appropriate comments and description related to the components and the props of the component. Try keeping your code simple with simpler types for Autogen to work.**\\n\\n**Please note:** The file name of the component as well as the folder must be in Capital letter. We use `regex` to parse the file paths, so this is important.\\n\\n**Note**: If there are complex types/defaultValue, please head to `website/scripts/docgen/docgenParser.ts` to deal with those cases. Although we recommend you to avoid it as far as possible. Try improving the React logic and that will work.\\n\\n## How to add a new demo for the component?\\n\\nThe demos can now be added by moving in to the `usage` directory under `website/docs/main` directory. We now have added Snack Player so that you get the glimpse of the component and also get to know how it works. Under the `usage`, there is a separate folder for each UI Component, where you can add Usage related to component and relevant descriptions.\\n\\n**Note**: To add Snack demo, add it inside the snack directory. You can add as many Snack which will make our repository more helpful for developers.\\n\\n## Testing the changes\\n\\nFor testing the changes in the documentation autogeneration, we simply need to run the following commands in sequence.\\n\\n```bash\\ncd website\\nyarn test\\n```\\n\\nWe have also included the changes in the main test process, so this will automatically run with the workflow as well as when you run the `yarn test` command from root of the project.\\n\\n## Future\\n\\nSome of the components are class-based. They are: Input, SearchBar, Rating.(from https://github.com/Monte9/react-native-ratings). If you change the components to Functional/hooks based please remove it from the array of `filesToExclude` under `website/scripts/docgen/getComponentFiles.ts`. These are the paths of the component files for which the process is still manual.\\n\\nSo, generating the documentation doesn\'t come up well for these components. Due to the existing structure `react-docgen-typescript` fails to generate relevant result for them. We are therefore looking for contributions on these components to make them Fuctional/Hooks based.\\n\\nThanks. Hope you like the new workflow. Looking forward for improvements and contributions to it."},{"id":"/2020/08/10/2.3-upgrade-guide","metadata":{"permalink":"/blog/2020/08/10/2.3-upgrade-guide","source":"@site/blog/2020-08-10-2.3-upgrade-guide.md","title":"Version 2.3 Upgrade Guide","description":"There have been a lot of changes and improvements coming through the pipeline recently with react-native-elements. So in preparing for a version 3, there are some planned deprecations that will be added into version 2.3 and then removed in version 3.","date":"2020-08-10T00:00:00.000Z","formattedDate":"August 10, 2020","tags":[],"readingTime":3.015,"truncated":false,"authors":[{"name":"Core Team","url":"https://opencollective.com/react-native-elements#team"}],"frontMatter":{"title":"Version 2.3 Upgrade Guide","author":"Core Team","authorURL":"https://opencollective.com/react-native-elements#team"},"prevItem":{"title":"Auto-generation of Documentation Website","permalink":"/blog/2021/08/12/auto-generation-of-docs"},"nextItem":{"title":"React Native Elements 1.0","permalink":"/blog/2019/01/27/1.0-release"}},"content":"There have been a lot of changes and improvements coming through the pipeline recently with `react-native-elements`. So in preparing for a version 3, there are some planned deprecations that will be added into version 2.3 and then removed in version 3.\\n\\nThe reason for these changes is that `react-native-elements` regularly gets requests for new features and enhancements quite frequently. The fast and easy method of adding these new features is usually to add another prop into the component that then injects some change into a child component. Unfortunately, this ends up leading to the components having a lot of props, lots of conditional code, and additional code complexity. The solution going forward and into version 3 will be to break down large components into smaller pieces so that it is easier to inject your own code without having to wait for an additional prop to be added.\\n\\nAs we continue to build up to version 3, this post will continue to be updated with new step-by-step directions on how to upgrade your code to work around these changes. The RNE team thanks you for your patience, and we hope that you see the value in the upcoming changes.\\n\\n## Avatar\\n\\n`accessory`, `showAccessory`, and `accessoryProps` are all being dprecated. There is now a child component `Avatar.Accessory` that you insert as a child component instead.\\n\\n```js\\n<Avatar>\\n  <Avatar.Accessory {...accessoryProps} />\\n</Avatar>\\n```\\n\\n## ListItem\\n\\n`ListItem` has a large number of deprecated props. `ListItem` has been somewhat of a kitchen sink. All the props can be replaced by inserting them as children in the order of left to right as they appear on the screen.\\n\\n### leftElement, leftIcon, leftAvatar, rightElement, rightIcon, rightAvatar\\n\\nThese can be replaced by using `Text`, `Icon`, and `Avatar` components respectively.\\n\\n### title, titleStyle, titleProps, subtitle, subtitleProps, subtitleStyle\\n\\nThese props can be replaced by `ListItem.Content`, `ListItem.Title` and `ListItem.Subtitle`\\n\\n```js\\n<ListItem>\\n  <ListItem.Content>\\n    <ListItem.Title style={titleStyle} {...titleProps}>\\n      {title}\\n    </ListItem.Title>\\n  </ListItem.Content>\\n</ListItem>\\n```\\n\\n### contentContainerStyle, rightContentContainerStyle\\n\\nThese props should be placed in the `style` prop of `ListItem.Content`.\\n\\n### rightTitle, rightTitleStyle, rightTitleProps, rightSubtitle, rightSubtitleStyle, rightSubtitleProps\\n\\nThese props also use `ListItem.Content`, `ListItem.Title`, and `ListItem.Subtitle`. Simply add the prop `right` to each one.\\n\\n```js\\n<ListItem>\\n  <ListItem.Content right>\\n    <ListItem.Title right style={titleStyle} {...titleProps}>\\n      {title}\\n    </ListItem.Title>\\n  </ListItem.Content>\\n</ListItem>\\n```\\n\\n### input, buttonGroup, switchProps, checkBox, badge, chevron, checkmark\\n\\nThe `input` prop can be replaced with `ListItem.Input`.\\n\\nThe `buttonGroup` prop can be replaced with `ListItem.ButtonGroup`.\\n\\nThe `switchProps` prop can be replaced with `react-native`\'s `Switch`.\\n\\nThe `checkBox` prop can be replaced with `ListItem.CheckBox`.\\n\\nThe `badge` prop can be replaced with `Badge`.\\n\\nThe `chevron` prop can be replaced with `ListItem.Chevron`.\\n\\nThe `checkmark` prop can be replaced with :\\n\\n```js\\n<Icon name=\\"check\\" size={20} />\\n```\\n\\n## Card\\n\\nFor `Card` the following props have all been deprecated: `title`, `titleStyle`, `titleNumberOfLines`, `dividerStyle`, `image`, `imageStyle`, `imageProps`, `imageWrapperStyle`, `featuredTitle`, `featuredTitleStyle`, `featuredSubtitle`, `featuredSubtitleStyle`\\n\\n### title, titleStyle, titleNumberOfLines\\n\\nMove these props into `Card.Title`\\n\\n```js\\n<Card>\\n  <Card.Title style={titleStyle} numberOfLines={titleNumberOfLines}>\\n    {title}\\n  </Card.Title>\\n</Card>\\n```\\n\\n### dividerStyle\\n\\nThe divider and the `dividerStyle` itself were moved into `Card.Divider`\\n\\n### image, imageStyle, imageProps, imageWrapperStyle\\n\\nThese can be replaced with `Card.Image` which accepts all `Image` props. `imageWrapperStyle` can be attached to a `View` that wraps the `Image`\\n\\n### featuredTitle, featuredTitleStyle, featuredSubtitle, featuredSubtitleStyle\\n\\nThese were both replaced with `Card.FeaturedTitle` and `Card.FeaturedSubtitle`\\n\\n## BottomSheet\\n\\n`BottomSheet` was added in version 2.2, and it was noted that it had some strict dependencies that weren\'t so well liked. So `BottomSheet` has changed completely and it is encouraged that you checkout the docs page on it again.\\n\\n## Dark Mode\\n\\nMake sure to checkout the customization page. We added a dark mode configuration to the `ThemeProvider` that should help out in bootstrapping your app\'s dark mode."},{"id":"/2019/01/27/1.0-release","metadata":{"permalink":"/blog/2019/01/27/1.0-release","source":"@site/blog/2019-01-27-1.0-release.md","title":"React Native Elements 1.0","description":"React Native Elements has UI elements that are easy to use & really customizable. It also has theming, platform specific search bars, React Native Web support, and much more.","date":"2019-01-27T00:00:00.000Z","formattedDate":"January 27, 2019","tags":[],"readingTime":7.64,"truncated":false,"authors":[{"name":"Core Team","url":"https://opencollective.com/react-native-elements#team"}],"frontMatter":{"title":"React Native Elements 1.0","author":"Core Team","authorURL":"https://opencollective.com/react-native-elements#team"},"prevItem":{"title":"Version 2.3 Upgrade Guide","permalink":"/blog/2020/08/10/2.3-upgrade-guide"},"nextItem":{"title":"React Native Web","permalink":"/blog/2018/12/13/react-native-web"}},"content":"> React Native Elements has UI elements that are easy to use & really customizable. It also has theming, platform specific search bars, [React Native Web](https://github.com/necolas/react-native-web) support, and much more.\\n\\nIt\'s finally here! Let\'s put our hands together and welcome React Native Elements 1.0 \ud83c\udf89\\n\\nThis release is centered around making RNE components that everyone loves more intuitive to use & stable. This is not to say that all the work is done, but this is definitely a giant leap in the right direction and one that we have been working on for over a year.\\n\\nI want like to say thank you to our users for using RNE and giving us feedback through issues on the repo and also the contributors who have the taken time to contribute and help improve RNE together. Finally, I\'d like to say a big thanks to [Kyle Roach](https://twitter.com/roach_iam) and [Xavier Villel\xe9gier](https://twitter.com/xaviervllgr) without whom this project would not have been as awesome as it is today!!\\n\\nThis blog post is meant to serve as a migration guide for upgrading to `react-native-elements: \\"^1.0.0\\"` from `0.19.1` and also a way to document and share all the breaking changes, new features and other improvements in this release. For those updating from `1.0.0-beta7` you can view those release notes [here](https://github.com/react-native-elements/react-native-elements/releases/tag/v1.0.0).\\n\\nThe wait is over!! Get excited, cause we certainly are. 14K \ud83c\udf1f and counting...\\n\\n## Installation\\n\\nFirst, install the library using your favorite package manager: `yarn add react-native-elements`\\n\\nAlso if you are using an older version, just update the `react-native-elements` version in `package.json` to `^1.0.0`\\n\\n## Breaking changes\\n\\n- Updated all components that have the `component` prop to `Component` prop as per convention ([#1479](https://github.com/react-native-elements/react-native-elements/pull/1479))\\n\\n- Some colors have been removed from the colors file and some changed. Here\'s the list of colors from 0.19.1.\\n\\n```js\\n{\\n  primary: \'#9E9E9E\',\\n  primary1: \'#4d86f7\',\\n  primary2: \'#6296f9\',\\n  secondary: \'#8F0CE8\',\\n  secondary2: \'#00B233\',\\n  secondary3: \'#00FF48\',\\n  grey0: \'#393e42\',\\n  grey1: \'#43484d\',\\n  grey2: \'#5e6977\',\\n  grey3: \'#86939e\',\\n  grey4: \'#bdc6cf\',\\n  grey5: \'#e1e8ee\',\\n  dkGreyBg: \'#232323\',\\n  greyOutline: \'#bbb\',\\n  searchBg: \'#303337\',\\n  disabled: \'#dadee0\',\\n  white: \'#ffffff\',\\n  error: \'#ff190c\',\\n};\\n```\\n\\n### `Avatar`\\n\\n- Props `small`, `medium`, `large`, `xlarge` have been removed. Usage is now `size=\\"small\\"` etc. [#1098](https://github.com/react-native-elements/react-native-elements/pull/1098)\\n\\n### `Badge`\\n\\n- `wrapperStyle` prop has been removed - use `containerStyle` prop instead ([#1545](https://github.com/react-native-elements/react-native-elements/pull/1545))\\n- `badgeStyle` prop replaces previous behaviour of `containerStyle` prop ([#1545](https://github.com/react-native-elements/react-native-elements/pull/1545))\\n- `element` prop which was undocumented is removed - use `value` prop instead ([#1545](https://github.com/react-native-elements/react-native-elements/pull/1545))\\n- can no longer render children - instead use `value` prop which now supports rendering react components ([#1545](https://github.com/react-native-elements/react-native-elements/pull/1545))\\n\\n### `Button`\\n\\n- By default on Android there\'s no more elevation ([#1538](https://github.com/react-native-elements/react-native-elements/pull/1538)). To get elevation, use the `raised` prop.\\n- Renamed `textStyle` to `titleStyle`\\n- Renamed `containerViewStyle` to `containerStyle`\\n- Removed props `transparent` and `outline` ([#1540](https://github.com/react-native-elements/react-native-elements/pull/1540)). Instead use the `type` prop.\\n\\n```jsx\\n// Transparent\\n<Button type=\\"clear\\" />\\n\\n// Outline\\n<Button type=\\"outline\\" />\\n```\\n\\n- Removed props `secondary`, `secondary2`, `secondary3`, `primary1`, `primary2`, `backgroundColor`. Use the `buttonStyle` prop to set the background color.\\n- Removed `iconComponent` prop. If you want to use a different Icon component - the `icon` prop supports custom elements.\\n- Removed `loadingRight` prop. Loading indicator **displays without title**. May re-add in future.\\n- Removed `borderRadius` prop. To control the border radius use the `buttonStyle` prop.\\n- Removed props `color`, `fontSize`, `fontWeight`, and `fontFamily`. Instead use the `titleStyle` prop to set attributes for the title.\\n- Removed `large` prop. May re-add in future.\\n\\n### `ButtonGroup`\\n\\n- `disableSelected` prop has been removed ([#1587](https://github.com/react-native-elements/react-native-elements/pull/1587))\\n\\n### `Card`\\n\\n- `fontFamily` prop is deprecated - instead use `titleStyle` prop ([#1659](https://github.com/react-native-elements/react-native-elements/pull/1587))\\n- `flexDirection` prop is deprecated - instead use `wrapperStyle` prop ([#1659](https://github.com/react-native-elements/react-native-elements/pull/1587))\\n\\n### `Form`\\n\\n- `FormInput` been renamed to `Input` ([#497](https://github.com/react-native-elements/react-native-elements/pull/497))\\n\\n  - `clearText` method renamed to `clear`\\n  - `textInputRef` and `containerRef` props removed\\n  - `normalizeFontSize` prop removed. You can use the `normalize` helper along with the `inputStyle` prop to normalize font sizes.\\n\\n- `FormLabel` has been removed. This is now built into the `Input` component by use of `label` prop. Props `labelStyle` and `labelProps` can be used to customize it.\\n- `FormValidationMessage` has been removed. This is now built into the `Input` component by use of `errorMessage` prop. Props `errorStyle` and `errorProps` can be used to customize it.\\n\\n### `Header`\\n\\n- Props `innerContainerStyles`, `outerContainerStyles` removed [#1221](https://github.com/react-native-elements/react-native-elements/pull/1221). Instead use the `containerStyle` prop for main styling, along with props `leftContainerStyle`, `centerContainerStyle`, and `rightContainerStyle` when needed.\\n\\n### `SearchBar`\\n\\nSearchBar now supports different platform styles! To get an iOS or Android themed SearchBar, use the `platform` prop. `platform=\\"ios\\"` or `platform=\\"android\\"`\\n\\n- `noIcon` prop removed. Instead to remove the search icon use the `searchIcon` prop. E.g `searchIcon={null}`\\n- `showLoadingIcon` prop renamed to `showLoading` [#837](https://github.com/react-native-elements/react-native-elements/pull/837)\\n- `containerRef` prop removed\\n\\n### `List`\\n\\n- **`List` component has been removed!** `List` was just a regular React Native View with some small margin styles. It wasn\'t actually needed to use the `ListItem` component. Instead we recommend using the [`FlatList`](https://reactnative.dev/docs/flatlist) or [`SectionList`](https://reactnative.dev/docs/sectionlist) components from React Native which function both as Views and also displaying items, pull to refresh and more.\\n- If you want to apply the same styles that the `List` component provided prior to 1.0, [see this comment](https://github.com/react-native-elements/react-native-elements/issues/1565#issuecomment-436982251).\\n\\n### `ListItem`\\n\\n- `leftIconOnPress`, `leftIconOnLongPress`, `leftIconUnderlayColor`, and `leftIconContainerStyle`, removed. The `leftIcon` prop can accept props.\\n\\n```jsx\\n<ListItem\\n  title=\\"Yea\\"\\n  leftIcon={{ name: \'home\', onPress: () => alert(\'hello\') }}\\n/>\\n```\\n\\n- `avatar`, `avatarStyle`, `avatarContainerStyle`, `roundAvatar`, and `avatarOverlayContainerStyle` removed. Avatars can now be customized using the `rightAvatar` and `leftAvatar` props which can either render a custom element or an object that describes the props from Avatar.\\n\\n```jsx\\n<ListItem\\n  leftAvatar={{\\n    title: \'MD\',\\n    rounded: false,\\n    containerStyle: { margin: 5 },\\n    onPress: () => alert(\'hey\'),\\n  }}\\n  rightAvatar={{ title: \'DW\', onLongPress: () => alert(\'hey\') }}\\n/>\\n```\\n\\n- `wrapperStyle` prop removed. Use the `containerStyle` prop instead.\\n- `titleNumberOfLines`, `subtitleNumberOfLines`, and `rightTitleNumberOfLines` props removed. Use the `titleProps`, `rightTitleProps`, and `subtitleProps` props to pass props for each..\\n\\n```jsx\\n<ListItem titleProps={{ numberOfLines: 4 }} />\\n```\\n\\n- `hideChevron` removed. Use the `chevron` prop instead. However, the behaviour is swapped `hideChevron={true}` behaves like `chevron={false}`\\n- `chevronColor` removed. The `chevron` prop now can accept an object describing it\'s appearance.\\n\\n```jsx\\n<ListItem chevron={{ color: \'pink\' }} />\\n```\\n\\n- `fontFamily` removed. Use the `titleStyle` and `subTitleStyle` props to set change the text styling\\n- `titleContainerStyle` removed. Use the `titleStyle` prop instead.\\n- `rightTitleContainerStyle` removed. Use the `rightTitleStyle` prop instead.\\n- `subtitleContainerStyle` removed. Use the `subtitleStyle` prop instead.\\n- `label` prop removed.\\n- `switchButton`, `onSwitch`, `switchDisabled`, `switchOnTintColor`, `switchThumbTintColor`, `switchTintColor`, and `switched` removed. Instead use the `switch` prop wich accepts an object describing its props.\\n- `textInput`,`textInputAutoCapitalize`,`textInputAutoCorrect`,`textInputAutoFocus`,`textInputEditable`,`textInputKeyboardType`,`textInputMaxLength`,`textInputMultiline`,`textInputOnChangeText`,`textInputOnFocus`,`textInputOnBlur`,`textInputSelectTextOnFocus`,`textInputReturnKeyType`,`textInputValue`,`textInputSecure`,`textInputStyle`,`textInputContainerStyle`,`textInputPlaceholder` removed. We now expose a single `input` prop which accepts an object describing its props.\\n- `onPressRightIcon` removed. Use the `rightIcon` prop which can accept an object now describing its props.\\n\\n```jsx\\n<ListItem rightIcon={{ name: \'home\', onPress: () => console.log(\'clicked\') }} />\\n```\\n\\n### `PricingCard`\\n\\n- `titleFont` removed. Use the `titleStyle` prop instead to customize the title. [#1231](https://github.com/react-native-elements/react-native-elements/pull/1231)\\n- `pricingFont` removed. Use the `pricingStyle` prop instead to customize the price. [#1231](https://github.com/react-native-elements/react-native-elements/pull/1231)\\n- `infoFont` removed. Use the `infoStyle` prop instead to customize the info. [#1231](https://github.com/react-native-elements/react-native-elements/pull/1231)\\n- `buttonFont` removed. Use the `button` prop with a `buttonStyle` key to set this.\\n\\n```jsx\\n<PricingCard button={{ buttonStyle: { fontFamily: \'Arial\' } }} />\\n```\\n\\n### `Text`\\n\\n- `fontFamily` prop is removed - instead use `style` prop ([#1659](https://github.com/react-native-elements/react-native-elements/pull/1587))\\n\\n## New features\\n\\n- Support for React Native Web - read more on it [here](/blog/2018/12/13/react-native-web) ([#1664](https://github.com/react-native-elements/react-native-elements/pull/1664))\\n- Theming support across components - easily build light & dark modes and theme your components from one place ([#1454](https://github.com/react-native-elements/react-native-elements/pull/1454))\\n- New `<Image />` Component - displays images with a placeholder and smooth image load transitioning ([#1582](https://github.com/react-native-elements/react-native-elements/pull/1582))\\n- New `<Input />` Component - a branch new and improved replacement for `<FormInput />` ([#497](https://github.com/react-native-elements/react-native-elements/pull/497))\\n- New `withBadge` HOC allows you to easily add badges to icons and other components ([#1604](https://github.com/react-native-elements/react-native-elements/pull/1604))\\n- New \\"mini badge\\" with the `<Badge />` component - Perfect for status indicators and notifications [#1545](https://github.com/react-native-elements/react-native-elements/pull/1545)\\n- New Tap Rating `<AirbnbRating />` component - powered by `react-native-ratings` ([#1671](https://github.com/react-native-elements/react-native-elements/pull/1671))\\n- Platform-specific `<SearchBar />` component - drop-in usage with native look and feel ([#837](https://github.com/react-native-elements/react-native-elements/pull/837))\\n- `<Slider />` Component - supports `vertical` orientation ([#1698](https://github.com/react-native-elements/react-native-elements/pull/1698))\\n- Button types! Easily have solid, clear, and outline buttons with one prop. ([#1540](https://github.com/react-native-elements/react-native-elements/pull/1540))\\n- Background image support in the `<Header />` ([#1556](https://github.com/react-native-elements/react-native-elements/pull/1556))\\n- Add support for `AntDesign` icons ([#1529](https://github.com/react-native-elements/react-native-elements/pull/1529))\\n\\n## Assorted fixes & improvements\\n\\n- Updated `react-native-vector-icons` peerDependency to `>4.2.0`\\n- Expose `helpers` methods that are used internally\\n- Close to 100% types coverage\\n- Docs\\n  - Add descriptions for every Component ([#1527](https://github.com/react-native-elements/react-native-elements/pull/1527))\\n  - Add central place to show supported icon sets ([#1532](https://github.com/react-native-elements/react-native-elements/pull/1532))\\n  - Added Showcase section to display apps using RNE ([#1704](https://github.com/react-native-elements/react-native-elements/pull/1704))\\n\\n## Ecosystem and web support\\n\\n### Independent Projects\\n\\n- Mock iOS Settings Screen - Check it out on the [RNE-App here](https://github.com/Monte9/react-native-elements-app)\\n\\n### Web Support\\n\\n- Follow [this detailed Blog Post](/blog/2018/12/13/react-native-web) to use RNElements with RNWeb\\n\\n> Lastly, here is the RNE v1 release in numbers:\\n>\\n> - 470 commits (with over 272 PR\'s)\\n> - 371 files changes (52,920 additions and 32,737 deletions)\\n> - Over 80 contributors\\n> - Over \\\\$1500 awarded to contributors\\n\\n---\\n\\nThanks for reading! Feel free to share this post if you enjoyed reading it.\\n\\nIf you run into any trouble using RNE, please open a new issue [here](https://github.com/react-native-elements/react-native-elements/issues). Also if you want to support us, you can contribute to our Open Collective [here](https://opencollective.com/react-native-elements)."},{"id":"/2018/12/13/react-native-web","metadata":{"permalink":"/blog/2018/12/13/react-native-web","source":"@site/blog/2018-12-13-react-native-web.md","title":"React Native Web","description":"Comprehensive Guide to create simple app using React Native Web and React Native\xa0Elements","date":"2018-12-13T00:00:00.000Z","formattedDate":"December 13, 2018","tags":[],"readingTime":11.455,"truncated":false,"authors":[{"name":"Havit Rovik","url":"https://github.com/haruelrovix"}],"frontMatter":{"title":"React Native Web","author":"Havit Rovik","authorURL":"https://github.com/haruelrovix"},"prevItem":{"title":"React Native Elements 1.0","permalink":"/blog/2019/01/27/1.0-release"}},"content":"> Comprehensive Guide to create simple app using React Native Web and React Native\xa0Elements\\n\\nCase study: `gitphone`, GitHub repository checker for your smartphone.\\n\\n<img src=\\"https://cdn-images-1.medium.com/max/1000/1*PHcPxP963ascQkeZOqy-rQ.png\\" />\\n\\n## ToC\\n\\n- Initialize the project using [CRNWA](https://github.com/VISI-ONE/create-react-native-web-app)\\n- Make sure everything works: Android, iOS and Web\\n- Add RNE latest ( 1.0.0-beta7 ) to the project\\n- Add 2 screens\\n\\nScreen 1 RNE components:\\n\\n1. Input\\n1. Button with Icon\\n\\nScreen 2 RNE components:\\n\\n1. Header\\n1. ListItem\\n1. Avatar\\n1. Text\\n\\n`gitphone` should have:\\n\\n- routing, [react-router](https://reacttraining.com/react-router). It works great both on Native and Web.\\n- calls to GitHub API. See https://developer.github.com/v3/.\\n\\n## 0\ufe0f\u20e3 Initial\xa0Step\\n\\nInstall create-react-native-web-app\\n\\n```\\n$ npm i -g create-react-native-web-app\\n```\\n\\n## 1\ufe0f\u20e3 First\xa0Step\\n\\nCreate `gitphone` project.\\n\\n```\\n\u03bb create-react-native-web-app gitphone\\n\\n\u23f3 Creating React Native Web App by the name of gitphone ...\\n\\n\u2705 Created project folder.\\n\\n\u2705 Added project files.\\n\\n\u23f3 Installing project dependencies...\\n\\nyarn install v1.10.1\\n[1/4] Resolving packages...\\n[2/4] Fetching packages...\\ninfo fsevents@1.2.4: The platform \\"win32\\" is incompatible with this module.\\ninfo \\"fsevents@1.2.4\\" is an optional dependency and failed compatibility check. Excluding it from installation.\\n[3/4] Linking dependencies...\\n[4/4] Building fresh packages...\\nsuccess Saved lockfile.\\nDone in 797.66s.\\n\\n\u2705 Installed project dependencies.\\n\\n\u2705 Done! \ud83d\ude01\ud83d\udc4d Your project is ready for development.\\n\\n* change directory to your new project\\n$ cd gitphone\\n\\n$ Then run the these commands to get started:\\n\\n* To run development Web server\\n$ yarn web\\n\\n* To run Android on connected device (after installing Android Debug Bridge \\"adb\\" - https://developer.android.com/studio/releases/platform-tools)\\n$ yarn android\\n\\n* To run ios simulator (after installing Xcode - only on Apple devices)\\n$ yarn ios\\n\\n* To run tests for Native and Web\\n$ yarn test\\n\\n* To run build for Web\\n$ yarn build\\n```\\n\\nChange to `gitphone` directory and test the web app by running `yarn web`.\\n\\n```\\nStarting the development server...\\nCompiled successfully!\\nYou can now view create-react-native-web-app in the browser.\\nLocal:            http://localhost:3001/\\nOn Your Network:  http://172.26.235.145:3001/\\nNote that the development build is not optimized.\\nTo create a production build, use yarn build.\\n```\\n\\n<img src=\\"https://cdn-images-1.medium.com/max/800/1*tmq9VHw3S4cgxfWg8xN3gQ.png\\" width={300} />\\n\\nNow, test the `gitphone` android app by running `yarn android`.\\n\\n```\\nInstalling APK \'app-debug.apk\' on \'Redmi 4X - 7.1.2\' for app:debug\\nInstalled on 1 device.\\n\\nBUILD SUCCESSFUL\\n\\nTotal time: 21.783 secs\\n\\nStarting: Intent { cmp=com.creaternwapp/.MainActivity }\\n\u2728  Done in 25.64s.\\n```\\n\\nIf the build successful, you\'ll see the app installed on your Android (emulator) device.\\n\\n<img src=\\"https://cdn-images-1.medium.com/max/800/1*BddouTisdXvDzY5vB9U3pQ.png\\" width={300} />\\n\\nBut if you got an error when run `yarn android`, please see Troubleshooting section below.\\n\\nThe last part for First Step, make sure it can be run on iOS without any problem. Run `yarn ios` and _voila!_\\n\\n<img src=\\"https://cdn-images-1.medium.com/max/800/1*6AHlumHN29RANlXsrXDu4g.png\\" width={300} />\\n\\n## 2\ufe0f\u20e3 Step\xa0Two\\n\\nInstalling React Native Elements (RNE).\\n\\n```\\n$ yarn add react-native-elements@beta\\n```\\n\\nInstalling React Native Vector Icons (RNVI).\\n\\n```\\n$ yarn add react-native-vector-icons\\n```\\n\\nLinking:\\n\\n```\\n$ react-native link react-native-vector-icons\\n```\\n\\nBoth RNE and RNVI are written using es6. If you run `yarn web` at this point, you\'ll got an error.\\n\\n```\\n./node_modules/react-native-elements/src/config/withTheme.js\\nModule parse failed: Unexpected token (12:28)\\nYou may need an appropriate loader to handle this file type.\\n```\\n\\nWe need to tell webpack to transpile them.\\n\\n1. Open `config/webpack.config.dev.js`\\n1. On line 141 `Process JS with babel`, add RNE and RNVI to include\\n1. Do the same for `config/webpack.config.prod.js` as well \ud83d\udc4c\\n\\nIf you get lost, see this [gist](https://gist.github.com/haruelrovix/01d335dfcabec17a6aa5bc7a53fef277) or commit [8c0e603](https://github.com/haruelrovix/gitphone/commit/8c0e6036d9231cc934285502528a2061b848ce2d).\\n\\n## 3\ufe0f\u20e3 Give it a\xa0try\\n\\nNow, let\'s grasp the idea how RNE works.\\n\\n1. Open src/App.js\\n1. Import Button from RNE\\n\\n   ```\\n   import { Button } from \'react-native-elements\';\\n   ```\\n\\n1. On render, change TouchableHighlight to use RNE\'s Button\\n1. Run yarn ios, yarn android and yarn web to see it in action! \ud83d\udc4f\\n\\nNote: If you got an error `Could not find com.android.tools.build.appt2` when running `yarn android`, add `google` on the gradle repositories.\\n\\nSee this [gist](https://gist.github.com/haruelrovix/51a695a4fe292767bedc32ec638f9736) or commit for the details: [a2ebba1](https://github.com/haruelrovix/gitphone/commit/a2ebba14aef533925b593933fa885e2f990b2ace).\\n\\n## 4\ufe0f\u20e3 Add Home component\\n\\nOur first component will be `Home`. On this component, there are two input fields and one Submit button.\\n\\n1. Inside `src`, create new folder: `Components`\\n1. Add new file called `Home.js` [gist](https://gist.github.com/haruelrovix/04eeb6c4d8d0cc56e041e5be2c20bc97)\\n1. On `App.js`, import `Home` component [gist](https://gist.github.com/haruelrovix/15cd4badc3a9ec949037b19d9195d6bc)\\n1. Run `yarn ios`, `yarn android` and `yarn web` to see it in action! \ud83c\udf87\\n\\n### Styling for Home component\\n\\nYou should notice that our `Home` doesn\u2019t look good in term of UI. Let\u2019s add styling for it.\\n\\n1. Inside `Components`, create `Shared.style.js` file [gist](https://gist.github.com/haruelrovix/7fee3c03b9fead9b74739e28a24effa9)\\n1. Import the style and update `Home` component as below [gist](https://gist.github.com/haruelrovix/4fb2e695d1562ff3475ebc91e6c27fcd)\\n1. Looks better now\\\\*, commit for adding Home component: [2e510c4](https://github.com/haruelrovix/gitphone/commit/2e510c462c68d7c68433f2706cf8fbb847d6541e).\\n\\n_Wait a minute\u2026_ \\\\*Seems there is a problem with RNVI on the web version. You can check this [Web (with webpack)](https://github.com/oblador/react-native-vector-icons#web-with-webpack) article or just following steps bellow.\\n\\n1. Open `config/webpack.config.dev.js`\\n1. Add url-loader on line 162 [gist](https://gist.github.com/haruelrovix/edd520f4bf4268e17ef56f40314080a5)\\n1. Do the same for `config/webpack.config.prod.js` as well \ud83d\udc4c\\n1. Open `src/index.js` file\\n1. Add `iconFont` and append `style` to document\u2019s head [gist](https://gist.github.com/haruelrovix/b291e8a4f34577d94e85570d304b82fe)\\n\\n![Our RNE x RNW progress so far~](https://cdn-images-1.medium.com/max/2584/1*YS7jioDKIKKvort5AzGXYA.png)_Our RNE x RNW progress so far~_\\n\\n## 5\ufe0f\u20e3 Routing\\n\\nNext, let\u2019s add second component: `CommitList`.\\n\\n1. Create new folder inside `Components` named `Commit`\\n1. Add new file: `CommitList.js` [gist](https://gist.github.com/haruelrovix/4cece6275cf40d97defb036756bab82b)\\n\\nOn our app, user goes to second screen by click on `Submit` button. How do we implement it?\\n\\n_\u201creact-router comes to the rescue\u201d_ - [https://reacttraining.com/react-router/](https://reacttraining.com/react-router/)\\n\\nAdd react-router-dom and react-router-native\\n\\n    $ yarn add react-router-dom react-router-native\\n\\nWeb needs `BrowserRouter` while native `NativeRouter`. We need to separate it based on the platform.\\n\\n1. On `src`, create `Utils` folder\\n1. Add two files on `Utils`: `Routing.native.js` and `Routing.web.js` [gist](https://gist.github.com/haruelrovix/3d7e26df6bb2d6056e2f4612a77fd2fc)\\n\\nThose file\u2019s content differ only on the second line. [gist](https://gist.github.com/haruelrovix/32353543e417373a770365f855701c37)\\n\\nNow, glue it together.\\n\\n1. Open `App.js`, import `CommitList` component\\n1. Import `Route`, `Router` and `Switch` from `Utils/Routing`\\n1. Implement routing inside `render` method [gist](https://gist.github.com/haruelrovix/d5bf357efbbf094b26549f40709ec74f)\\n1. Now for the action on `Submit` button, open `Home.js`\\n1. Import `withRouter` from `Utils/Routing`\\n\\n   ```\\n   import { withRouter } from \'../Utils/Routing\';\\n   ```\\n\\n1. `WithRouter` is an HOC. Use it to wrap `Home` component\\n\\n   ```\\n   export default withRouter(Home);\\n   ```\\n\\n1. Add `onPress` property for the button\\n\\n   ```\\n   onPress={this.onPressButton}\\n   ```\\n\\n1. Implement the `onPressButton` event handler\\n\\n   ```\\n   onPressButton = () => this.props.history.push(\'/commit\');\\n   ```\\n\\n1. All `Home` together [gist](https://gist.github.com/haruelrovix/8fc8ae9dab580c5e79f24a59a2c195b6) | [commit](https://github.com/haruelrovix/gitphone/commit/f193aa3c268e7be263ae529de0f719ffd443e26d)\\n\\nTest it on `web` and `android`, you should be able to go back and forth between screens using `Submit` and pressing `Back` button.\\n\\n_\u201cHow can I go back on iOS?\u201d_ \ud83d\ude02\\n\\n### Implement withHeader\\n\\nWe will create a `withHeader` HOC. Why HOC? We can reuse it easier _if we add more screens later._\\n\\n1. On `src`, create `HOCs` folder\\n\\n1. Add `withHeader.js` file\\n\\n1. Import `Header` from RNE and `Icon` from `RNVI/FontAwesome`\\n\\n   ```\\n   import { Header } from \'react-native-elements\';\\n   import Icon from \'react-native-vector-icons/FontAwesome\';\\n   ```\\n\\n1. `withHeader` accepts one prop: `title`\\n\\n   ```\\n   const withHeader = ({ title = \'\' }) => (WrappedComponent) => {\\n   ```\\n\\n1. Event handler to go back / go home\\n\\n   ```\\n   goBack = () => this.props.history.goBack();\\n\\n   goHome = () => this.props.history.replace(\'/\');\\n   ```\\n\\n1. Import and use `withHeader` in `CommitList` component [gist](https://gist.github.com/haruelrovix/b1608f9f010caa47c18ebc71d87106ae) | [commit](https://github.com/haruelrovix/gitphone/commit/0cf995bde91f5958e252188f1343de923069e7f3)\\n\\n## 6\ufe0f\u20e3 Fetch data from GitHub API\\n\\nLet\u2019s fetch a real-live data: list commit on repository by [GitHub](https://developer.github.com/v3/repos/commits/#list-commits-on-a-repository) and render it on our second screen, `CommitList`.\\n\\n    GET /repos/:owner/:repo/commits\\n\\nIdeally, the :owner and :repo are form values from our first screen. Since the objective of this article is RNE x RNW, talk about that form (and state-management) later on.\\n\\nTo fetch GitHub API, we will use [fetch-hoc](https://github.com/esphen/fetch-hoc) package and also need [compose](https://redux.js.org/api/compose) from `redux`, to handle multiple HOCs on the same component.\\n\\n    $ yarn add fetch-hoc redux\\n\\n1. Open `CommitList.js`\\n\\n1. Import `{ compose }` from `redux` and `fetch` from `fetch-hoc`\\n\\n1. Use it as below [gist](https://gist.github.com/haruelrovix/1c3affbfd585c3b8acfc1c156164fd1f) | [commit](https://github.com/haruelrovix/gitphone/commit/334197c7c05bd1bdb1b648ca56cfe69c8b496eed)\\n\\nNow run `yarn web`, open `network` tab of `DevTools` and click `Submit` button, you\u2019ll see bunch of commit data. By default GitHub API returning 30 commits.\\n\\n### Render commit data\\n\\nCommit data that will be displayed on the screen:\\n\\n    author.avatar_url\\n\\n    commit:\\n      author.name\\n      message\\n\\nLet\u2019s modify `CommitList.js`\\n\\n1. Add new imports\\n\\n   ```\\n   import { ActivityIndicator, Dimensions, FlatList, Platform, View } from \'react-native\';\\n   import { Avatar, ListItem } from \'react-native-elements\';\\n   ```\\n\\n1. On main render, modify it as below\\n\\n   ```\\n   <View style={styles.container}>\\n     {this.renderContent()}\\n   </View>\\n   ```\\n\\n1. Create `renderContent` method\\n\\n   ```\\n   renderContent = () => (\\n     this.props.loading ?\\n       <ActivityIndicator color=\'#87ceeb\' /> :\\n       <FlatList\\n         keyExtractor={this.keyExtractor}\\n         data={this.props.data}\\n         renderItem={this.renderItem}\\n       />\\n   )\\n   ```\\n\\n1. Create `renderItem` method\\n\\n   ```\\n   renderItem = ({ item }) => (\\n     <ListItem\\n       title={item.commit.author.name}\\n       subtitle={item.commit.message}\\n       leftElement={this.renderLeftElement(item)\\n     />\\n   )\\n   ```\\n\\n1. Create `renderLeftElement` method\\n\\n   ```\\n   renderLeftElement = (item) => (\\n     <View>\\n       <Avatar\\n         source={{ uri: item.author.avatar_url }}\\n         size=\'medium\'\\n         rounded\\n       />\\n     </View>\\n   )\\n   ```\\n\\n1. Here is our new `CommitList` including the styling to make it prettier [gist](https://gist.github.com/haruelrovix/e4b02328766efd1491338d5111becff7) | [commit](https://github.com/haruelrovix/gitphone/commit/27a78672958f0caaa34b3e93c934685b9dcebd50)\\n\\n**Here they are!**\\n\\n![awesome, eh?](https://cdn-images-1.medium.com/max/6436/1*iD3lSG6D3lGDkJr5HB2i2A.png)_awesome, eh?_\\n\\n## 7\ufe0f\u20e3 Handle form submission\\n\\nOur app looks great so far. But we are not passing values from first to second screen. Let\u2019s do it.\\n\\n1. To handle form, we\u2019ll use [formik](https://github.com/jaredpalmer/formik)\\n\\n   ```\\n   $ yarn add formik\\n   ```\\n\\n1. Open `Home.js` and import it\\n\\n   ```\\n   import { Formik } from \'formik\';\\n   ```\\n\\n1. Wrap main `View` with `formik`\\n\\n   ```\\n   <Formik initialValues={{ owner: \'\', repo: \'\' }}\\n     onSubmit={this.onPressButton}>\\n     {({ handleChange, handleSubmit, values }) => (\\n       <View style={styles.container}>\\n   ```\\n\\n1. Add `onChangeText` handler to the `Input`\\n\\n   ```\\n   <Input ... onChangeText={handleChange(\'owner\')} value={values.owner}\\n   <Input ... onChangeText={handleChange(\'repo\')} value={values.repo}\\n   ```\\n\\n1. Change `Button` `onPress` props to `handleSubmit`\\n\\n   ```\\n   <Button ... onPress={handleSubmit}\\n   ```\\n\\n1. Don\u2019t forget to close the main `View`\\n\\n   ```\\n       </View>\\n     )}\\n   </Formik>\\n   ```\\n\\nForm submission: done \ud83d\udc4c Next question: How do we pass these values to second screen? _Send them when we redirect to second screen!_\\n\\n1. Inside `onPressButton` method, send an object instead of `pathname` only.\\n\\n   ```\\n   this.props.history.push({\\n     pathname: \'/commit\',\\n     state: { owner, repo }\\n   });\\n   ```\\n\\n1. Open `CommitList`, import `withRouter`\\n\\n   ```\\n   import { withRouter } from \'../../Utils/Routing\';\\n   ```\\n\\n1. Add `withRouter` inside `compose`\\n\\n1. Get the values passed down to `withRouter` and use it to `fetch`\\n\\n   ```\\n   withHeader({ title: \'Commits\' }),\\n   withRouter,\\n   fetch(({ location: { state = {} } }) => (\\n    `https://api.github.com/repos/${state.owner}/${state.repo}/commits`\\n   ))\\n   ```\\n\\nHOC\u2019s order does matter. So, make sure it the same as snippet above. In case you lost, here is the commit: [1d83c5e](https://github.com/haruelrovix/gitphone/commit/1d83c5e1487d2d99c00cc1b18f563ed4497d87b9).\\n\\nTest the app. Now we should able to fetch any GitHub repository, _with some caveats._ \ud83d\udc40\\n\\n## 8\ufe0f\u20e3 Polishing the app\\n\\nWhat happens if we fetch repository which doesn\u2019t exist? _Red screen on native, blank screen on web!_ \ud83d\ude39\\n\\n`fetch-hoc` returns an error if it has. Let\u2019s use it.\\n\\n1. On `CommitList`, modify `renderContent`\\n\\n   ```\\n   this.props.loading ?\\n     <ActivityIndicator color=\'#87ceeb\' /> :\\n     this.renderFlatList()\\n   ```\\n\\n1. Import `Text` from RNE\\n\\n   ```\\n   import { ..., Text } from \'react-native-elements\';\\n   ```\\n\\n1. Add `renderFlatList` method\\n\\n   ```\\n   this.props.error ?\\n     <Text h4>Error: {this.props.data.message || \'\ud83d\ude15\'}</Text> :\\n     <FlatList ... />\\n   ```\\n\\nTest it. Instead of _red or blank_ screen, now `Error: Not Found` displayed.\\n\\nWhat\u2019s else? Try to fetch `facebook/react-native`. We got another error \ud83d\ude40\\n\\n    Cannot read property \'avatar_url\' of null\\n\\nNot all of `author` have `avatar_url`. We should do this for the Avatar `source`.\\n\\n    source={{uri: (item.author && item.author.avatar_url) || undefined}}\\n\\nSo, our app renders nothing if it has no url? It doesn\u2019t look good. _Solution: render author initial name._\\n\\nWith the help of RegEx and Avatar `title` props, `renderLeftElement` should look like this now:\\n\\n    renderLeftElement = (item) => {\\n      const initials = item.commit.author.name.match(/\\\\b\\\\w/g) || [];\\n\\n    return (\\n        <View style={leftElementStyle}>\\n          <Avatar\\n            title={((initials.shift() || \'\') + (initials.pop() || \'\'))}\\n            ...\\n\\nCommit for Polishing the app section: [943974b](https://github.com/haruelrovix/gitphone/commit/943974b285635884dc3ec1d7981146307dfd98d3).\\n\\nWhen I wrote this, fetch `facebook/react-native` returning following:\\n\\n![Why no love for regex? Thanks to [Sanoor](https://stackoverflow.com/a/33076482).](https://cdn-images-1.medium.com/max/3812/1*OYTvJP0RLLQemyT0ukb1Iw.png)_Why no love for regex? Thanks to [Sanoor](https://stackoverflow.com/a/33076482)._\\n\\n## Conclusion\\n\\nWe have created a simple app using RNE + RNW \ud83d\udc4f\\n\\n- Works great on iOS, web and android? \u2705\\n\\n- Use components from react-native-elements? \u2705\\n\\n- Move between screens? \u2705\\n\\n- API calls? \u2705\\n\\nSome improvements for `gitphone`:\\n\\nIf you go back from `Commits` screen, input form on `Home` screen are empty. If you want preserve previous values, this can be fixed easily by introducing redux to the app. References here: [48108dd](https://github.com/haruelrovix/rnw-github/pull/1/commits/48108ddc3e80669b9d57b2f998a5073d5e5eabb0).\\n\\nCan we fetch more commits data once we reach the most bottom of the list? Infinite scroll?\\n\\nFor web, we can use [react-visibility-sensor](https://github.com/joshwnj/react-visibility-sensor). Check it out: [6c1f689](https://github.com/haruelrovix/rnw-github/pull/1/commits/6c1f6894d78840648a11bbdf2d0e841fb6dad12d).\\n\\nFor native, it\u2019s easier. We can use `FlatList` `onEndReached` props. To give you an idea how, see this: [9d2e1f2](https://github.com/haruelrovix/rnw-github/pull/2/commits/9d2e1f2a3e8605f8184f1f8950eb0175045bb67a).\\n\\n## Troubleshooting \ud83d\udcba\\n\\n**#1** **Build failed when running `yarn android`**\\n\\n    :app:compileDebugAidl FAILED\\n\\n    FAILURE: Build failed with an exception.\\n\\n    * What went wrong:\\n    Execution failed for task \':app:compileDebugAidl\'.\\n    > java.lang.IllegalStateException: aidl is missing\\n\\n    * Try:\\n    Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.\\n\\n    BUILD FAILED\\n\\nHere is how to fix #1:\\n\\n1. Open Android Studio.\\n\\n![](https://cdn-images-1.medium.com/max/2000/1*GJ4GJ5KKimpr7MZP4R2yPA.png)\\n\\n2. Open `android` project under `gitphone`.\\n\\n![](https://cdn-images-1.medium.com/max/2000/1*jyLo3Jk-nudieT3aaEzUBQ.png)\\n\\n3. Click Update on this prompt.\\n\\n![](https://cdn-images-1.medium.com/max/2000/1*7I2tqGZ9C63aUGOtae-XHg.png)\\n\\nWait for Android Studio syncing the project.\\n\\n4. It synced successfully with two errors.\\n\\n![](https://cdn-images-1.medium.com/max/2558/1*GUlICoUm4cU4KzUfps3W0Q.png)\\n\\n5. At this stage, just click `Update Build Tools version and sync project` on the sync window.\\n\\n6. Now, the remaining warning is the `Configuration \'compile\'...`\\n\\n7. To fix that, open `app/build.gradle` file, change `dependencies` section (line 139) to use `implementation` instead of `compile`.\\n\\n   dependencies {\\n   implementation fileTree(dir: \\"libs\\", include: [\\"*.jar\\"])\\n   implementation \\"com.android.support:appcompat-v7:23.0.1\\"\\n   implementation \\"com.facebook.react:react-native:+\\"\\n   }\\n\\n8. Sync it again and close Android Studio.\\n\\n![](https://cdn-images-1.medium.com/max/2000/1*lIP2u1_7NmTmy8mcri6Smw.png)\\n\\nTroubleshooting for android is done. Now, you should be able to run `yarn android` successfully.\\n\\n**#2 Build failed when running `yarn ios`**\\n\\n    ** BUILD FAILED **\\n\\n    The following build commands failed:\\n\\n     CompileC /gitphone/ios/build/Build/Intermediates.noindex/React.build/Debug-iphonesimulator/double-conversion.build/Objects-normal/x86_64/strtod.o /gitphone/node_modules/react-native/third-party/double-conversion-1.1.5/src/strtod.cc normal x86_64 c++ com.apple.compilers.llvm.clang.1_0.compiler\\n\\nHere is how to fix #2:\\n\\nInside the project, run script below from your favourite terminal\\n\\n    $ curl -L https://git.io/fix-rn-xcode10 | bash\\n\\nIf you run `yarn ios` again, and you got this error\\n\\n    The following build commands failed:\\n     Libtool /gitphone/ios/build/Build/Products/Debug-iphonesimulator/libRCTWebSocket.a normal x86_64\\n    (1 failure)\\n\\nPlease run this script:\\n\\n    $ cp ios/build/Build/Products/Debug-iphonesimulator/libfishhook.a node_modules/react-native/Libraries/WebSocket\\n\\nTroubleshooting for iOS is done. Now, you should be able to run `yarn ios` successfully.\\n\\n### Authors\\n\\n- [haruelrovix](https://github.com/haruelrovix)\\n- [andangrd](https://github.com/andangrd)"}]}')}}]);